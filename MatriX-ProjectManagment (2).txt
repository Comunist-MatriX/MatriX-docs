Create Database MatriX default charset utf8 default collate utf8_general_ci;

use MatriX;




create table if not exists User_TBL(
                userId              bigint primary key auto_increment,
                date_of_signup      datetime not null,
                first_name          varchar(30) not null , 
                last_name           varchar(30) , 
                email               varchar(100) not null , 
                github              varchar(60) , 
                DateOfBirth         date ,
                description         varchar(1000) , 
                profile_picture     varchar(1000) , 
                password            varchar(30) not null , 
                user_name           varchar(30) not null );

create table if not exists company_TBL(
		companyId           int primary key auto_increment,
		title               varchar(30) not null,
		number_of_member    tinyint not null , 
		description         varchar(1000)  );

create table if not exists project_TBL(
                projectId           int primary key auto_increment,
		userId              bigint not null,
                companyId           int  not null,
		title               varchar(30) not null, 
		description         varchar(1000),
		date_of_begin       datetime not null , 
		date_of_end         datetime not null ,
constraint FK_project_user_userId foreign key (userId) references User_TBL (userId) ON DELETE no action on update cascade ,
constraint FK_Poject_Comoany_companyId foreign key(companyId) references company_TBL(companyId) ON DELETE no action on update cascade
              
);
create table if not exists status_TBL(
		statusId            tinyint primary key auto_increment,
		title               varchar(30) not null);

create table if not exists milestone_TBL(
		milestoneId         bigint primary key auto_increment,
		userId              bigint not null,
	    projectId           int not null ,
		title               varchar(30) not null, 
		date_of_begin       datetime not null , 
		date_of_end         datetime not null ,
		description         varchar(1000),
constraint FK_milestone_user_userId foreign key (userId) references User_TBL (userId) ON DELETE no action on update cascade ,
constraint FK_milestone_project_projectId foreign key (projectId) references project_TBL (projectId) ON DELETE no action on update cascade );


create table if not exists invitation_TBL(
		invitationId        bigint primary key auto_increment,
		projectId           int not null ,
		description         varchar(1000), 
		destination         varchar(30) not null,  
		date_of_invitation  datetime not null ,
constraint FK_invitation_project_projectId foreign key (projectId) references project_TBL (projectId) ON DELETE no action on update cascade 
              
);
create table if not exists user_project_TBL(
		projectId           int not null,
		userId              bigint not null,
        primary key(projectId,userId),
constraint FK_project_user_userId_1 foreign key (userId) references User_TBL (userId) ON DELETE no action on update cascade ,
constraint FK_project_user_projectId_1 foreign key (projectId) references project_TBL (projectId) ON DELETE no action on update cascade               
);

create table if not exists user_company_TBL(
		companyId           int not null,
		userId              bigint not null,
		isowner             boolean ,
		fromdate            date , 
		untildate           date , 
		position            varchar(25),
        primary key(companyId,userId,fromdate),
constraint FK_company_user_userId_2 foreign key (userId) references User_TBL (userId) ON DELETE no action on update cascade ,
constraint FK_company_user_companyId foreign key (companyId) references company_TBL (companyId) ON DELETE no action on update cascade               
);

create table if not exists user_invitation_TBL(
		invitationId         bigint not null,
		userId               bigint not null,
		isseen               boolean ,
	    isaccept             boolean ,
		read_time            datetime,
        primary key(invitationId,userId),
constraint FK_invitation_user_invitationId foreign key (invitationId) references  invitation_TBL (invitationId) ON DELETE no action on update cascade ,
constraint FK_invitationId_user_userId foreign key (userId) references User_TBL (userId) ON DELETE no action on update cascade               
);

create table if not exists note_TBL(
                noteId               int primary key auto_increment,
                userId               bigint not null,
                title                varchar(30) not null, 
                text                 varchar(1000) ,
                date_time            datetime ,
constraint FK_note_userId foreign key (userId) references  User_TBL (userId) ON DELETE no action on update cascade
);


create table if not exists task_TBL(
		taskId              int primary key auto_increment,
		projectId           int not null , 
		title               varchar(30) not null, 
		description         varchar(1000), 
		date_of_begin       date ,
		date_of_end         date , 
		extra_date          date ,
		subtaskId           int not null UNIQUE , 
constraint FK_task_projectId foreign key (projectId) references  project_TBL (projectId) ON DELETE no action on update cascade ,
constraint FK_task_subtaskId foreign key (subtaskId) references  task_TBL (taskId) ON DELETE no action on update cascade
);


create table if not exists comment_TBL(
		commentId            bigint primary key auto_increment,
		userId               bigint not null,
		title                varchar(30) not null, 
		text                 varchar(1000) ,
		date_time            datetime ,
		taskId               int not null , 
constraint FK_comment_userId foreign key (userId) references  User_TBL (userId) ON DELETE no action on update cascade ,
constraint FK_comment_taskId foreign key (taskId) references  task_TBL (taskId) ON DELETE no action on update cascade
);
create table if not exists task_user_TBL(
		taskId               int,
		userId               bigint not null,
		isowner              boolean , 
        primary key(taskId,userId),
constraint FK_task_user_taskId foreign key (taskId) references  task_TBL (taskId) ON DELETE no action on update cascade ,
constraint FK_task_user_userId foreign key (userId) references  User_TBL (userId) ON DELETE no action on update cascade

);
create table if not exists task_milestone_TBL(
		taskId              int,
		milestoneId         bigint not null, 
        primary key(taskId,milestoneId),
constraint FK_task_milestone_taskId foreign key (taskId) references  task_TBL (taskId) ON DELETE CASCADE ,
constraint FK_task_milestoner_milestoneId foreign key (milestoneId) references  milestone_TBL (milestoneId) ON DELETE CASCADE

);

create table if not exists task_user_status_TBL(
		taskId               int primary key auto_increment,
		userId               bigint not null,
	    statusId             tinyint not null , 
constraint FK_task_user_status_taskId foreign key (taskId) references  task_TBL (taskId) ON DELETE CASCADE ,
constraint FK_task_user_status_userId foreign key (userId) references  User_TBL (userId) ON DELETE CASCADE , 
constraint FK_task_user_status_statusId foreign key (statusId) references  status_TBL(statusId) ON DELETE CASCADE
);

create table if not exists history_of_project_status(
		fromdate             date not null,
		projectId            int not null,
		statusId             tinyint not null , 
		untildate            date , 
        primary key(fromdate ,projectId , statusId ),
constraint FK_history_project_status_projectId foreign key (projectId) references project_TBL (projectId) ON DELETE CASCADE , 
constraint FK_history_project_status_statusId foreign key (statusId) references  status_TBL (statusId) ON DELETE CASCADE
);








